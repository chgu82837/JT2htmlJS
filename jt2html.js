// Generated by LiveScript 1.2.0
(function(){
  'use strict';
  window.JT2html = function(JSON, complete, template, config, dontFireAtOnce){
    var instance, pattern, defaultValue, JsonResolver, errSignal, genHTML, genContext, appendToBody, info, warn;
    JSON == null && (JSON = []);
    complete == null && (complete = function(){});
    template == null && (template = {
      body: "<nav class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n    @{title}\n    <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n        @{list}\n        @{link}\n    </div><!-- /.navbar-collapse -->\n</nav>",
      title: "<div id=\"@{id}\" class=\"navbar-header @{class}\">\n    <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n    </button>\n\n    <div id=\"nav_title_bg\" class=\"hidden-xs\" style=\"height:50px\">\n        <a class=\"hidden-xs navbar-brand\" href=\"@{href}\" title=\"@{info}\">@{text}</a>\n    </div>\n    \n    \n    <a class=\"navbar-brand visible-xs\" href=\"@{href}\">@{text}</a>\n    <p class=\"navbar-text visible-xs\">@{info}</p>\n</div>\n\n",
      list: "<ul id=\"@{id}\" class=\"nav navbar-nav @{class}\">\n    <li class=\"dropdown\">\n        <a href=\"@{href}\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">@{text}<b class=\"caret\"></b></a>\n        <ul class=\"dropdown-menu\">\n            @{}\n        </ul>\n    </li>\n</ul>",
      link: "<ul id=\"@{id}\" class=\"nav navbar-nav @{class}\">\n    <li><a href=\"@{href}\" target=\"_blank\">@{text}</a></li>\n</ul>",
      "": "<li id=\"@{id}\" class=\"@{class}\"><a href=\"@{href}\">@{text}</a></li>"
    });
    config == null && (config = {});
    dontFireAtOnce == null && (dontFireAtOnce = false);
    instance = {
      JSON: JSON,
      template: template,
      config: {
        JsonResolver: function(aData){
          var i, v, results$ = {};
          for (i in aData) {
            v = aData[i];
if (i.substr(0, 4) === "gsx$") {
              results$[i.replace("gsx$", "")] = v['$t'];
            }
          }
          return results$;
        },
        info: false,
        root: 'body',
        defaultValue: {
          href: '#'
        }
      }
    };
    config = importAll$(instance.config, config);
    JSON = instance.JSON;
    pattern = /@\{(\w*)\}/;
    defaultValue = instance.config.defaultValue;
    JsonResolver = instance.config.JsonResolver;
    errSignal = 'JT2htmlERROR';
    genHTML = function(navData){
      var funTitle, pool, templateS, ik, tmp, type, template, jk;
      funTitle = 'genHTML';
      info("generating HTML...", funTitle);
      instance.pool = {};
      pool = instance.pool;
      templateS = instance.template;
      ik = navData.length;
      while (--ik >= 0) {
        tmp = JsonResolver(navData[ik]);
        type = tmp['type'] + "";
        delete tmp['type'];
        template = templateS[type] || errSignal;
        if (template === errSignal) {
          warn("type:\"" + type + "\" is not defined!", funTitle);
        } else {
          info("type:\"" + type + "\" is going to be processd...", funTitle);
          for (jk in tmp) {
            pool[jk] = tmp[jk] + (pool[jk] || "");
          }
          pool[type] = genContext(template) + (pool[type] || "");
        }
      }
      type = instance.config.root;
      template = templateS[type] || errSignal;
      if (template === errSignal) {
        warn("root type:\"" + type + "\" is not defined!", funTitle);
      } else {
        info("data collection done, generating root:\"" + type + "\"", funTitle);
      }
      return genContext(template);
    };
    genContext = function(template){
      var funTitle, pool, context, touched, r, k, v;
      funTitle = 'genContext';
      pool = instance.pool;
      context = template + "";
      touched = [];
      while (r = context.match(pattern)) {
        touched.push(r[1]);
        context = context.substring(0, r.index) + (pool[r[1]] || defaultValue[r[1]] || "") + context.substring(r.index + r[0].length);
      }
      for (k in touched) {
        v = touched[k];
        pool[v] = "";
      }
      return context;
    };
    appendToBody = function(HTML){
      var body;
      info("appending HTML to body...");
      body = document.getElementsByTagName('body')[0].innerHTML;
      document.getElementsByTagName('body')[0].innerHTML = HTML + body;
      return 'done';
    };
    info = instance.config.info && console.log
      ? function(msg, title){
        if (title) {
          return console.log("[ JT2html:" + title + " ] => " + msg);
        } else {
          return console.log(msg);
        }
      }
      : function(){};
    warn = function(msg, title){
      if (title) {
        return console.log("[ JT2html:" + title + " ] => " + msg);
      } else {
        return console.log(msg);
      }
    };
    instance.fire = function(){
      var funTitle, HTML, ToAppend;
      funTitle = 'start';
      info("JT2html fired", funTitle);
      HTML = genHTML(JSON);
      ToAppend = function(){
        return appendToBody(HTML);
      };
      if (!complete(ToAppend)) {
        return ToAppend();
      }
    };
    if (!dontFireAtOnce) {
      instance.fire();
    }
    info("JT2html instance:");
    info(instance);
    return instance;
  };
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
